name: Setup NGINX Reverse Proxy with SSL

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain name for SSL certificate (e.g., n8n.yourdomain.com)'
        required: true
        type: string
        default: 'n8n.yourdomain.com'
      email:
        description: 'Email address for Let''s Encrypt notifications'
        required: true
        type: string
        default: 'your-email@domain.com'

jobs:
  setup-nginx:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Display workflow inputs
        run: |
          echo "üöÄ Starting NGINX + SSL setup"
          echo "Domain: ${{ github.event.inputs.domain }}"
          echo "Email: ${{ github.event.inputs.email }}"
          echo "Timestamp: $(date)"

      - name: Validate inputs
        run: |
          DOMAIN="${{ github.event.inputs.domain }}"
          EMAIL="${{ github.event.inputs.email }}"
          
          if [ -z "$DOMAIN" ]; then
            echo "‚ùå Error: Domain is required"
            exit 1
          fi
          
          if [ -z "$EMAIL" ]; then
            echo "‚ùå Error: Email is required"
            exit 1
          fi
          
          # Validate domain format
          if ! echo "$DOMAIN" | grep -qE '^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$'; then
            echo "‚ùå Error: Invalid domain format"
            exit 1
          fi
          
          # Validate email format
          if ! echo "$EMAIL" | grep -qE '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'; then
            echo "‚ùå Error: Invalid email format"
            exit 1
          fi
          
          echo "‚úÖ Domain: $DOMAIN"
          echo "‚úÖ Email: $EMAIL"
          
      - name: Validate secrets
        run: |
          SECRETS_MISSING=false
          
          if [ -z "${{ secrets.VM_SSH_KEY }}" ]; then
            echo "‚ùå Error: VM_SSH_KEY secret is not set"
            SECRETS_MISSING=true
          fi
          
          if [ -z "${{ secrets.VM_IP }}" ]; then
            echo "‚ùå Error: VM_IP secret is not set"
            SECRETS_MISSING=true
          fi
          
          if [ -z "${{ secrets.VM_USER }}" ]; then
            echo "‚ùå Error: VM_USER secret is not set"
            SECRETS_MISSING=true
          fi
          
          if [ "$SECRETS_MISSING" = true ]; then
            echo "Please configure the required GitHub secrets in your repository settings"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are present"
          
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write SSH key to file
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add host to known_hosts with error handling
          if ! ssh-keyscan -H -T 10 "${{ secrets.VM_IP }}" >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚ö†Ô∏è  Warning: Could not add host to known_hosts, will skip host key checking"
          fi
          
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o BatchMode=yes \
             "${{ secrets.VM_USER }}@${{ secrets.VM_IP }}" 'echo "‚úÖ SSH connection successful"'; then
            echo "SSH connection established successfully"
          else
            echo "‚ùå SSH connection failed"
            exit 1
          fi
          
      - name: Setup NGINX with SSL
        run: |
          DOMAIN="${{ github.event.inputs.domain }}"
          EMAIL="${{ github.event.inputs.email }}"

          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
              "${{ secrets.VM_USER }}@${{ secrets.VM_IP }}" << 'EOF'
            set -e  # Exit on any error
            
            PROJECT_DIR="$HOME/hbrm-test"
            DOMAIN="${{ github.event.inputs.domain }}"
            EMAIL="${{ github.event.inputs.email }}"

            echo "üîç Checking project directory..."
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚ùå Error: Project directory $PROJECT_DIR not found."
              echo "Please run setup-server workflow first."
              exit 1
            fi

            cd "$PROJECT_DIR"
            echo "‚úÖ Changed to project directory: $(pwd)"

            # Backup existing .env if it exists
            if [ -f ".env" ]; then
              cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
              echo "üì¶ Backed up existing .env file"
            elif [ -f ".env.example" ]; then
              cp .env.example .env
              echo "üìã Created .env from .env.example"
            else
              touch .env
              echo "üìÑ Created new .env file"
            fi

            # Function to update or add environment variable
            update_env_var() {
              local key="$1"
              local value="$2"
              local file=".env"
              
              if grep -q "^${key}=" "$file"; then
                # Update existing variable using a more robust approach
                sed -i.tmp "s|^${key}=.*|${key}=${value}|" "$file" && rm -f "${file}.tmp"
                echo "üîÑ Updated ${key} in .env"
              else
                echo "${key}=${value}" >> "$file"
                echo "‚ûï Added ${key} to .env"
              fi
            }

            # Update domain and email in .env
            update_env_var "DOMAIN" "$DOMAIN"
            update_env_var "CERTBOT_EMAIL" "$EMAIL"

            # Export environment variables for the script
            export DOMAIN="$DOMAIN"
            export CERTBOT_EMAIL="$EMAIL"

            echo "üîç Checking for setup script..."
            if [ ! -f "scripts/setup_nginx.sh" ]; then
              echo "‚ùå Error: scripts/setup_nginx.sh not found"
              ls -la scripts/ || echo "scripts directory doesn't exist"
              exit 1
            fi

            # Make setup script executable and run it
            chmod +x scripts/setup_nginx.sh
            echo "üöÄ Running NGINX setup script..."
            
            # Run the script with error handling
            if bash scripts/setup_nginx.sh; then
              echo "‚úÖ NGINX setup script completed successfully"
            else
              echo "‚ùå NGINX setup script failed"
              exit 1
            fi
          EOF
          
      - name: Verify NGINX setup
        run: |
          DOMAIN="${{ github.event.inputs.domain }}"

          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
              "${{ secrets.VM_USER }}@${{ secrets.VM_IP }}" << 'EOF'
            set -e
            
            PROJECT_DIR="$HOME/hbrm-test"
            DOMAIN="${{ github.event.inputs.domain }}"

            cd "$PROJECT_DIR"

            echo "üîç Checking Docker containers..."
            if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q nginx; then
              echo "‚úÖ NGINX container is running:"
              docker ps --filter "name=nginx" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            else
              echo "‚ö†Ô∏è  NGINX container not found or not running"
              echo "All running containers:"
              docker ps --format "table {{.Names}}\t{{.Status}}"
            fi

            echo ""
            echo "üîí Checking SSL certificate..."
            if docker exec nginx-proxy test -d "/etc/letsencrypt/live/$DOMAIN" 2>/dev/null; then
              echo "‚úÖ SSL certificate directory exists"
              docker exec nginx-proxy ls -la "/etc/letsencrypt/live/$DOMAIN/" 2>/dev/null || true
            else
              echo "‚ö†Ô∏è  SSL certificate not found for $DOMAIN"
              echo "Available certificates:"
              docker exec nginx-proxy ls -la /etc/letsencrypt/live/ 2>/dev/null || echo "No certificates found"
            fi

            echo ""
            echo "üåê Testing connectivity..."
            
            # Test HTTP first (should redirect to HTTPS)
            echo "Testing HTTP connection..."
            if curl -I -s -L --max-time 10 "http://$DOMAIN/health" > /dev/null 2>&1; then
              echo "‚úÖ HTTP connection successful"
            else
              echo "‚ö†Ô∏è  HTTP connection failed or no /health endpoint"
            fi
            
            # Test HTTPS
            echo "Testing HTTPS connection..."
            if curl -I -s -L --max-time 10 "https://$DOMAIN/health" > /dev/null 2>&1; then
              echo "‚úÖ HTTPS connection successful"
              # Get the actual response
              curl -I -L --max-time 10 "https://$DOMAIN/health" 2>/dev/null || true
            else
              echo "‚ö†Ô∏è  HTTPS connection failed or no /health endpoint"
              # Try root path instead
              if curl -I -s -L --max-time 10 "https://$DOMAIN/" > /dev/null 2>&1; then
                echo "‚úÖ HTTPS root connection successful"
              else
                echo "‚ùå HTTPS connection completely failed"
              fi
            fi
            
            echo ""
            echo "üìä Setup verification completed"
          EOF
          
      - name: Display setup summary
        if: always()
        run: |
          echo ""
          echo "üìã Setup Summary"
          echo "================"
          echo "Domain: ${{ github.event.inputs.domain }}"
          echo "Email: ${{ github.event.inputs.email }}"
          echo "Timestamp: $(date)"
          echo ""
          echo "Next steps:"
          echo "1. Verify your domain DNS points to your server IP"
          echo "2. Test the application at: https://${{ github.event.inputs.domain }}"
          echo "3. Check SSL certificate expiration and auto-renewal"
          echo ""
          echo "If issues persist, check the server logs:"
          echo "- docker logs nginx-proxy"
          echo "- docker logs <your-app-container>"
