name: Deploy to VM - Fixed SSH + Public Repo
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Fix SSH Key Format and Setup
        run: |
          echo "=== Setting up SSH with format fixes ==="
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write SSH key and fix common format issues
          echo "${{ secrets.VM_KEY }}" > ~/.ssh/id_rsa_temp
          
          # Remove Windows line endings and empty lines
          tr -d '\r' < ~/.ssh/id_rsa_temp | grep -v '^$' > ~/.ssh/id_rsa
          rm ~/.ssh/id_rsa_temp
          
          # Set correct permissions
          chmod 600 ~/.ssh/id_rsa
          
          # Debug key format (safe - no actual key content shown)
          echo "Key file size: $(wc -c < ~/.ssh/id_rsa) bytes"
          echo "Key file lines: $(wc -l < ~/.ssh/id_rsa)"
          echo "First line starts with: $(head -1 ~/.ssh/id_rsa | cut -c1-10)"
          echo "Last line ends with: $(tail -1 ~/.ssh/id_rsa | tail -c 10)"
          
          # Test key validity
          if ssh-keygen -l -f ~/.ssh/id_rsa 2>/dev/null; then
            echo "‚úÖ SSH key format is valid"
          else
            echo "‚ö†Ô∏è SSH key format issues detected, trying to fix..."
            
            # Alternative fix: ensure proper line breaks
            sed 's/-----BEGIN/\n-----BEGIN/' ~/.ssh/id_rsa | sed 's/-----END/-----END\n/' > ~/.ssh/id_rsa_fixed
            mv ~/.ssh/id_rsa_fixed ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            if ssh-keygen -l -f ~/.ssh/id_rsa 2>/dev/null; then
              echo "‚úÖ SSH key fixed successfully"
            else
              echo "‚ùå Could not fix SSH key format"
            fi
          fi
          
          # Add VM to known hosts
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
          echo "SSH setup completed"
          
      - name: Test SSH Connection
        run: |
          echo "=== Testing SSH connection ==="
          
          # Test with verbose output for debugging
          if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o BatchMode=yes \
                 ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} \
                 "echo 'SSH Success'; whoami; pwd"; then
            echo "‚úÖ SSH connection successful"
          else
            echo "‚ùå SSH connection failed. Debugging..."
            echo "Testing basic connectivity:"
            ping -c 3 ${{ secrets.VM_IP }} || echo "Cannot ping VM"
            
            echo "Testing SSH port:"
            timeout 10 bash -c "</dev/tcp/${{ secrets.VM_IP }}/22" && echo "Port 22 is open" || echo "Port 22 is closed"
            
            echo "Trying SSH with more verbose output:"
            ssh -vv -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
                ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "echo test" || true
            exit 1
          fi
          
      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            set -e
            
            echo "=== System Info ==="
            whoami
            pwd
            uname -a
            
            echo "=== Installing Docker and Git ==="
            sudo apt update
            sudo apt install -y docker.io git curl
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            
            echo "=== Testing Docker ==="
            sudo docker --version
            sudo docker run --rm hello-world
            
            echo "=== Cloning Public Repository ==="
            rm -rf ~/hbrm-test
            
            # Since repo is now public, simple clone should work
            if git clone https://github.com/aravindan888/hbrm-test.git ~/hbrm-test; then
              echo "‚úÖ Repository cloned successfully"
              ls -la ~/hbrm-test/
            else
              echo "‚ùå Failed to clone repository"
              echo "Checking network connectivity:"
              curl -I https://github.com || echo "Cannot reach GitHub"
              exit 1
            fi
            
            echo "=== Processing Files ==="
            if [ -d ~/hbrm-test/hbrm-main ]; then
              echo "Found hbrm-main directory, moving contents..."
              shopt -s dotglob
              cp -r ~/hbrm-test/hbrm-main/* ~/
              rm -rf ~/hbrm-test
              echo "‚úÖ Files moved from hbrm-main/"
            else
              echo "No hbrm-main directory, moving all files..."
              shopt -s dotglob
              cp -r ~/hbrm-test/* ~/
              rm -rf ~/hbrm-test  
              echo "‚úÖ All repository files moved to home"
            fi
            
            echo "=== Final Directory Structure ==="
            ls -la ~/
            
            echo "üéâ Deployment completed successfully!"
            
          EOF
