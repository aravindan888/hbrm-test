name: Setup & Deploy with Docker Compose

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.VM_SSH_KEY }}" ]; then
            echo "Error: VM_SSH_KEY secret is not set or is empty"
            exit 1
          fi
          if [ -z "${{ secrets.VM_IP }}" ]; then
            echo "Error: VM_IP secret is not set or is empty"
            exit 1
          fi
          if [ -z "${{ secrets.VM_USER }}" ]; then
            echo "Error: VM_USER secret is not set or is empty"
            exit 1
          fi
          echo "All required secrets are present"
          
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          
          if [ ! -s ~/.ssh/id_rsa ]; then
            echo "Error: SSH key file is empty after decoding"
            exit 1
          fi
          
          chmod 600 ~/.ssh/id_rsa
          
          if ! ssh-keygen -y -f ~/.ssh/id_rsa > /dev/null 2>&1; then
            echo "Error: Invalid SSH private key format"
            exit 1
          fi
          
          echo "SSH key setup completed successfully"
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
          
      - name: Test SSH connection and verify prerequisites
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            echo "‚úÖ SSH connection successful"

            echo "Checking Docker installation..."
            docker --version || { echo "‚ùå Docker not found!"; exit 1; }

            echo "Installing/Updating Docker Compose..."
            sudo apt update

            if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
              sudo apt install -y docker-compose-plugin || true
              if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
                sudo apt install -y docker-compose || true
              fi
              if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
                DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d'"' -f4)
                sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              fi
            fi

            if command -v docker-compose &> /dev/null; then
              echo "‚úÖ docker-compose: $(docker-compose --version)"
            elif docker compose version &> /dev/null; then
              echo "‚úÖ docker compose plugin: $(docker compose version)"
            else
              echo "‚ùå Docker Compose installation failed!"
              exit 1
            fi

            echo "Checking Docker service..."
            sudo systemctl is-active docker || { echo "‚ùå Docker service not running!"; exit 1; }

            echo "üéâ Server setup validation completed successfully!"
          EOF

      - name: Deploy Docker Compose project to VM
        run: |
          echo "üì¶ Copying docker-compose.yml and .env to server..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.yml ${{ secrets.VM_USER }}@${{ secrets.VM_IP }}:/home/${{ secrets.VM_USER }}/docker-compose.yml
          if [ -f ".env" ]; then
            scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa .env ${{ secrets.VM_USER }}@${{ secrets.VM_IP }}:/home/${{ secrets.VM_USER }}/.env
          fi

          echo "üöÄ Running docker-compose on server..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            cd /home/${USER}
            echo "Stopping old containers..."
            docker-compose down || true
            echo "Pulling latest images..."
            docker-compose pull
            echo "Starting services..."
            docker-compose up -d
            echo "‚úÖ Deployment complete!"
          EOF
