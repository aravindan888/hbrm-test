name: Deploy n8n

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.VM_SSH_KEY }}" ]; then
            echo "Error: VM_SSH_KEY secret is not set or is empty"
            exit 1
          fi
          if [ -z "${{ secrets.VM_IP }}" ]; then
            echo "Error: VM_IP secret is not set or is empty"
            exit 1
          fi
          if [ -z "${{ secrets.VM_USER }}" ]; then
            echo "Error: VM_USER secret is not set or is empty"
            exit 1
          fi
          echo "All required secrets are present"
          
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          
          # Verify the key was decoded properly
          if [ ! -s ~/.ssh/id_rsa ]; then
            echo "Error: SSH key file is empty after decoding"
            exit 1
          fi
          
          chmod 600 ~/.ssh/id_rsa
          
          # Verify key format
          if ! ssh-keygen -y -f ~/.ssh/id_rsa > /dev/null 2>&1; then
            echo "Error: Invalid SSH private key format"
            exit 1
          fi
          
          echo "SSH key setup completed successfully"
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
          
      - name: Test SSH connection and verify prerequisites
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            echo "SSH connection successful"
            echo "Checking Docker installation..."
            docker --version || { echo "Docker not found!"; exit 1; }
            echo "Checking Docker Compose..."
            if command -v docker-compose &> /dev/null; then
              echo "docker-compose found: $(docker-compose --version)"
            elif docker compose version &> /dev/null; then
              echo "docker compose plugin found: $(docker compose version)"
            else
              echo "Docker Compose not found! Installing..."
              sudo apt update && sudo apt install -y docker-compose-plugin
            fi
            echo "Checking Docker service..."
            sudo systemctl is-active docker || { echo "Docker service not running!"; exit 1; }
          EOF
          
      - name: Update repository and deploy n8n
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            PROJECT_DIR="$HOME/hbrm-test"
            # Check if project directory exists
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Error: Project directory $PROJECT_DIR not found!"
              echo "Please run the 'Setup Server' workflow first to clone the repository."
              exit 1
            fi
            # Force update repository and overwrite local changes
            echo "Updating repository and overwriting local changes..."
            cd "$PROJECT_DIR"
            # Backup current .env if it exists
            if [ -f ".env" ]; then
              cp .env .env.backup
              echo "Backed up existing .env file"
            fi
            # Reset any local changes and force update
            echo "Resetting local changes..."
            git reset --hard HEAD
            git clean -fd
            # Configure git pull strategy
            git config pull.rebase false
            # Force pull latest changes
            echo "Pulling latest changes..."
            git fetch origin main
            git reset --hard origin/main
            # Restore .env if backup exists
            if [ -f ".env.backup" ]; then
              mv .env.backup .env
              echo "Restored .env file"
            fi
            # Ensure scripts are executable
            chmod +x scripts/*.sh
            # Verify deployment script exists
            if [ ! -f "scripts/deploy_n8n.sh" ]; then
              echo "Error: deploy_n8n.sh script not found at $PROJECT_DIR/scripts/"
              echo "Repository contents:"
              ls -la
              echo "Scripts directory:"
              ls -la scripts/ || echo "Scripts directory not found"
              exit 1
            fi
            echo "Found deployment script, starting deployment..."
            chmod +x scripts/deploy_n8n.sh
            bash scripts/deploy_n8n.sh
          EOF
